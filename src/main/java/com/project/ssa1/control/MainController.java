package com.project.ssa1.control;


import com.project.ssa1.model.Customer;
import com.project.ssa1.service.UserTable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/ssa") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserTable userTable;

    @RequestMapping(path="/add", method={RequestMethod.POST, RequestMethod.GET}) // Map ONLY POST Requests
   public  @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email, @RequestParam String password,
                                            @RequestParam Integer phone, @RequestParam String address){
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Customer First = new Customer();
        First.setName(name);
        First.setEmail(email);
        First.setAddress(address);
        First.setPassword(password);
        First.setPhone(phone);
        userTable.save(First);
        return "successful";
    }

    @GetMapping(path="/all")
    @CrossOrigin(origins = "http://127.0.0.1:5501")
    public @ResponseBody Iterable<Customer> getAllUsers() {
        // This returns a JSON or XML with the users
        return userTable.findAll();
    }



    @RequestMapping(path = "/del/{id}", method={RequestMethod.DELETE, RequestMethod.GET})
    public @ResponseBody String deleteUser(@PathVariable Integer id)
    {
        userTable.deleteById(id);
        return "Deleted";
    }

    @RequestMapping(value = "/update/{id}", method= {RequestMethod.PUT, RequestMethod.GET})
    public @ResponseBody String updateUser(@RequestParam("email") String email, @RequestParam("name") String name, Customer customer)
    {
        customer.setEmail(email);
        customer.setName(name);
        userTable.save(customer);
        return "Updated";
    }

    @RequestMapping(path = "/post/{id}", method={RequestMethod.POST, RequestMethod.GET})
    public @ResponseBody String postUser(@RequestParam Customer customer)
    {
        customer = new Customer();
        userTable.save(customer);
        return "Posted";
    }

    @RequestMapping(path = "/get/{id}", method=RequestMethod.GET)
    public @ResponseBody Optional<Customer> findUser(@PathVariable Integer id)
    {
       return userTable.findById(id);
        //return sendRedirect()
    }

}
